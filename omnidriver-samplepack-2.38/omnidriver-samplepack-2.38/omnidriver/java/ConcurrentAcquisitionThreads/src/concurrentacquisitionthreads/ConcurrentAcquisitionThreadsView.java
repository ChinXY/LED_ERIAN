/*
 * ConcurrentAcquisitionThreadsView.java
 */

package concurrentacquisitionthreads;

import com.oceanoptics.omnidriver.api.wrapper.Wrapper;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.DefaultListModel;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 * The application's main frame.
 */
public class ConcurrentAcquisitionThreadsView extends FrameView {

    AcquisitionThread   acquisitionThread1;
    AcquisitionThread   acquisitionThread2;
    DefaultListModel defaultListModelFirst;
    DefaultListModel defaultListModelSecond;
    int     numberOfSpectrometers;
    long    startTimeMilliseconds; // start time of our acquisition test period
    Wrapper wrapper;
    
    public ConcurrentAcquisitionThreadsView(SingleFrameApplication app) {
        super(app);

        defaultListModelFirst = new DefaultListModel();
        defaultListModelSecond = new DefaultListModel();

        initComponents();

        wrapper = new Wrapper();
        
        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = ConcurrentAcquisitionThreadsApp.getApplication().getMainFrame();
            aboutBox = new ConcurrentAcquisitionThreadsAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        ConcurrentAcquisitionThreadsApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldIntegrationTime1 = new javax.swing.JTextField();
        jTextFieldIntegrationTime2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldAcquisitionRate1 = new javax.swing.JTextField();
        jTextFieldAcquisitionRate2 = new javax.swing.JTextField();
        jTextFieldSpectrometer1 = new javax.swing.JTextField();
        jTextFieldSpectrometer2 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(concurrentacquisitionthreads.ConcurrentAcquisitionThreadsApp.class).getContext().getResourceMap(ConcurrentAcquisitionThreadsView.class);
        jButton1.setText(resourceMap.getString("jButtonDiscoverSpectrometers.text")); // NOI18N
        jButton1.setName("jButtonDiscoverSpectrometers"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jScrollPane1.setMinimumSize(new java.awt.Dimension(230, 200));
        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jList1.setModel(defaultListModelFirst);
        jList1.setName("jListFirstSpectrometer"); // NOI18N
        jScrollPane1.setViewportView(jList1);

        jScrollPane2.setMinimumSize(new java.awt.Dimension(230, 200));
        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jList2.setModel(defaultListModelSecond);
        jList2.setName("jListSecondSpectrometer"); // NOI18N
        jScrollPane2.setViewportView(jList2);

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jTextFieldIntegrationTime1.setText(resourceMap.getString("jTextFieldIntegrationTime1.text")); // NOI18N
        jTextFieldIntegrationTime1.setName("jTextFieldIntegrationTime1"); // NOI18N

        jTextFieldIntegrationTime2.setText(resourceMap.getString("jTextFieldIntegrationTime2.text")); // NOI18N
        jTextFieldIntegrationTime2.setName("jTextFieldIntegrationTime2"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jTextFieldAcquisitionRate1.setEditable(false);
        jTextFieldAcquisitionRate1.setText(resourceMap.getString("jTextFieldAcquisitionRate1.text")); // NOI18N
        jTextFieldAcquisitionRate1.setName("jTextFieldAcquisitionRate1"); // NOI18N

        jTextFieldAcquisitionRate2.setEditable(false);
        jTextFieldAcquisitionRate2.setText(resourceMap.getString("jTextFieldAcquisitionRate2.text")); // NOI18N
        jTextFieldAcquisitionRate2.setName("jTextFieldAcquisitionRate2"); // NOI18N

        jTextFieldSpectrometer1.setEditable(false);
        jTextFieldSpectrometer1.setText(resourceMap.getString("jTextFieldSpectrometer1.text")); // NOI18N
        jTextFieldSpectrometer1.setName("jTextFieldSpectrometer1"); // NOI18N

        jTextFieldSpectrometer2.setEditable(false);
        jTextFieldSpectrometer2.setText(resourceMap.getString("jTextFieldSpectrometer2.text")); // NOI18N
        jTextFieldSpectrometer2.setName("jTextFieldSpectrometer2"); // NOI18N

        jButton2.setText(resourceMap.getString("jButtonBeginAcquiringSpectra.text")); // NOI18N
        jButton2.setName("jButtonBeginAcquiringSpectra"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText(resourceMap.getString("jButtonStopAcquisition.text")); // NOI18N
        jButton3.setName("jButtonStopAcquisition"); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTextFieldSpectrometer1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldIntegrationTime1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldAcquisitionRate1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldAcquisitionRate2, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldIntegrationTime2, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE))
                            .addComponent(jTextFieldSpectrometer2, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(6, 6, 6)
                        .addComponent(jButton3)))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jButton1)
                .addGap(24, 24, 24)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldSpectrometer1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldSpectrometer2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldIntegrationTime1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldIntegrationTime2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jTextFieldAcquisitionRate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldAcquisitionRate2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(53, 53, 53)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGap(75, 75, 75))
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(concurrentacquisitionthreads.ConcurrentAcquisitionThreadsApp.class).getContext().getActionMap(ConcurrentAcquisitionThreadsView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 622, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 452, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    /*
     * Discover spectrometers
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        numberOfSpectrometers = wrapper.openAllSpectrometers();
        switch (numberOfSpectrometers) {
            case 0:
                jTextFieldSpectrometer1.setText("no spectrometer present");
                jTextFieldSpectrometer2.setText("no spectrometer present");
                jButton2.setEnabled(false);
                jButton3.setEnabled(false);
                break;
            case 1:
                jTextFieldSpectrometer1.setText(wrapper.getName(0) + " [" + wrapper.getSerialNumber(0) + "]");
                jTextFieldSpectrometer2.setText("no spectrometer present");
                jButton2.setEnabled(true);
                jButton3.setEnabled(false);
                break;
            case 2:
            default:
                jTextFieldSpectrometer1.setText(wrapper.getName(0) + " [" + wrapper.getSerialNumber(0) + "]");
                jTextFieldSpectrometer2.setText(wrapper.getName(1) + " [" + wrapper.getSerialNumber(1) + "]");
                jButton2.setEnabled(true);
                jButton3.setEnabled(false);
                break;
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int  spectraAcquisitionRate; // spectra per second, rounded to the nearest whole number
        long durationOfTestMilliseconds;
        long endTimeMilliseconds;
        int  numberOfSpectraAcquired;
        
        endTimeMilliseconds = System.currentTimeMillis();
        durationOfTestMilliseconds = endTimeMilliseconds - startTimeMilliseconds;
        
        jTextFieldAcquisitionRate1.setText("undetermined");
        jTextFieldAcquisitionRate2.setText("undetermined");
        
        switch (numberOfSpectrometers) {
            case 0:
                return; // there are no attached spectrometers, so we don't need to do anything
            case 2:
            default:
                acquisitionThread2.stopAcquisition();
                numberOfSpectraAcquired = acquisitionThread2.getNumberOfSpectraAcuired();
                if (durationOfTestMilliseconds == 0)
                    spectraAcquisitionRate = 0; // avoid divide-by-zero
                else
                    spectraAcquisitionRate = (int)Math.round(((double)numberOfSpectraAcquired * 1000.0) / (double)durationOfTestMilliseconds);
                jTextFieldAcquisitionRate2.setText(new String().valueOf(spectraAcquisitionRate) + " per second");
                // we want to fall through to the next case
            case 1:
                acquisitionThread1.stopAcquisition();
                numberOfSpectraAcquired = acquisitionThread1.getNumberOfSpectraAcuired();
                if (durationOfTestMilliseconds == 0)
                    spectraAcquisitionRate = 0; // avoid divide-by-zero
                else
                    spectraAcquisitionRate = (int)Math.round(((double)numberOfSpectraAcquired * 1000.0) / (double)durationOfTestMilliseconds);
                jTextFieldAcquisitionRate1.setText(new String().valueOf(spectraAcquisitionRate) + " per second");
                break;
        }
        
        jButton2.setEnabled(true);
        jButton3.setEnabled(false);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int integrationTimeMicroseconds1=0;
        int integrationTimeMicroseconds2=0;
        
        jTextFieldAcquisitionRate1.setText("undetermined");
        jTextFieldAcquisitionRate2.setText("undetermined");

        // Read the user-specified integration times from the GUI
        try {
            if (numberOfSpectrometers >= 1)
                integrationTimeMicroseconds1 = Integer.parseInt(jTextFieldIntegrationTime1.getText());
            if (numberOfSpectrometers >= 2)
                integrationTimeMicroseconds2 = Integer.parseInt(jTextFieldIntegrationTime2.getText());
        } catch (NumberFormatException exception) {
            JOptionPane.showMessageDialog(null,"Invalid integration time specified.",
                    "Concurrent Acquisition Threads",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        switch (numberOfSpectrometers) {
            case 0:
                JOptionPane.showMessageDialog(null,"No Spectrometers present. Unable to acquire spectra.",
                        "Concurrent Acquisition Threads",JOptionPane.ERROR_MESSAGE);
                return;
            case 2:
            default:
                acquisitionThread2 = new AcquisitionThread(wrapper,1,jList2);
                acquisitionThread2.setIntegrationTime(integrationTimeMicroseconds2);
                acquisitionThread2.start();
                // We want to fall through to case 1 so that we start up another acquisition thread
            case 1:
                acquisitionThread1 = new AcquisitionThread(wrapper,0,jList1);
                acquisitionThread1.setIntegrationTime(integrationTimeMicroseconds1);
                acquisitionThread1.start();
                break;
        }
        
        startTimeMilliseconds = System.currentTimeMillis();
        
        jButton2.setEnabled(false);
        jButton3.setEnabled(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    /*
     * Begin acquiring spectra
     */
    /*
     * Interrupt spectra acquisition
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextFieldAcquisitionRate1;
    private javax.swing.JTextField jTextFieldAcquisitionRate2;
    private javax.swing.JTextField jTextFieldIntegrationTime1;
    private javax.swing.JTextField jTextFieldIntegrationTime2;
    private javax.swing.JTextField jTextFieldSpectrometer1;
    private javax.swing.JTextField jTextFieldSpectrometer2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;
}
